import net.neoforged.moddevgradle.dsl.ModModel

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    // bug -> https://github.com/neoforged/ModDevGradle/issues/227
//    id 'net.neoforged.moddev.legacyforge' version '2.0.64-beta'
    id 'net.neoforged.moddev.legacyforge' version '2.0.74'
    id 'online.keriils.plugins.spotless-wrapper' version '0.1.3'
}

//wrapperSpotless {
//    spotlessConfigJava(false)
//}
//
//spotless {
//    java {
//        googleJavaFormat('1.15.0').aosp()
//    }
//}

apply from: 'repositories.gradle'
apply from: 'dependencies.gradle'

tasks.named('wrapper', Wrapper).configure {
    Wrapper it -> it.distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id
base { archivesName = mod_id }
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty('forge.logging.markers', 'REGISTRIES')

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG

            if (this.project.usesMixinDebug == 'true') {
//                systemProperty('mixin.debug', 'true')
//                systemProperty('mixin.debug.verify', 'true')
//                systemProperty('mixin.debug.verbose', 'true')
                systemProperty('mixin.debug.export', 'true')
//                systemProperty('mixin.debug.countInjections', 'true')
            }
        }

        client {
            client()
            programArguments.addAll('--username', this.project.developmentEnvironmentUserName)
            programArguments.addAll('--uuid', this.project.developmentEnvironmentUserUUID)
            systemProperty('forge.enabledGameTestNamespaces', this.project.mod_id)
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', this.project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', this.project.mod_id
        }

        data {
            data()
            programArguments.addAll('--mod',
                this.project.mod_id,
                '--all', '--output',
                file('src/generated/resources/').getAbsolutePath(),
                '--existing',
                file('src/main/resources/').getAbsolutePath())
        }
    }

    mods {
        "${this.mod_id}" { ModModel its -> its.sourceSet(this.project.sourceSets.main) }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' exclude '**/.cache'}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        forge_version          : forge_version,
        forge_version_range    : forge_version_range,
        loader_version_range   : loader_version_range,
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_license            : mod_license,
        mod_version            : mod_version,
        mod_authors            : mod_authors,
        mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact sourcesJar
            from this.components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"
}

jar {
    manifest.attributes([
        "MixinConfigs": "mixins.${mod_id}.json"
    ])
}
